변수(Variable)
하나의 값을 저장하기 위해 확보한 메모리 공간 자체
그 메모리 공간을 식별하기위해 붙인 이름
어떤 정보의 이름을 붙여서 저장하기 위한 기능

const(키워드) plus(변수) =(할당) 10+20(값);
console.log(plus) //30
plus라는 변수가 창출되어서 '10'과 '20'이라는 메모리를
CPU가 환산하여 '30'이라는 메모리 공간을 확보하게 되고
30=plus가 된다.


변수의 선언
변수를 사용하려면 반드시 선언이 필요하다.
변수를 선언할 때는 var,let,const 키워드를 사용한다.

always const    재선언,재할당 금지
sometimes let   재선언 금지, 재할당 가능
never var       재선언 가능, 재할당 가능
(ES-6이후로는 var는 사용할수는 있지만 거의 쓰이지 않는다.)
const = birthday;
birthday = 30 (x)
let = birthday;
birthday = 30 (o)



리터럴(Literal)
사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는
표기법(notation)을 말한다.
숫자 리터럴과 문자 리터럴로 나위어진다.


표현식(expression)
값으로 평가될 수 있는 문(statement)이다. 즉, 표현식이 평가되면 새로운 값을
생성하거나 기존 값을 참조한다.


문(statement)은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.

var score = 100(100은 숫자 리터럴); [문]
각각 단어들은 모두 토큰이다. (var, score, =, 100, ;)



반복문
반복문은 조건식의 평가 결과가 참인 경우 코드 블록을 실행한다.
조건식이 거짓일 때까지 반복한다.

for (var i = 0; i < 2; i++) {
    console.log(i);
}
//0
//1

i = 0 확인
i < 2 비교
참이므로 0 출력
i++ 실행
i = 1 확인
i < 2 비교
참이므로 1 출력
i++ 실행
i = 2 확인
I < 2 비교
거짓이므로 출력하지 않음.

for 문은 반복횟수가 명확할때, while 문은 반복 횟수가 불명확할 때 사용한다.

var = count = 0;
while (count < 3) {
    console.log(count);
    conunt++;
}


break 문
break 문은 코드 블록을 탈출한다.
레이블 문, 반복문, switch 문의 코드 블록 외에 break 문을 사용하면 에러가 발생한다.
중첩된 for 문의 내부 for문에서 break 문을 실행하면 내부 for 문을 탈출하여 외부 for 문으로 진입한다.
이때 내부 for 문이 아닌 외부 for 문을 탈출하려면 레이블 문을 사용한다.

//outer라는 식별자가 붙은 레이블 for 문
outer: for (var i = 0; i < 3; i++)